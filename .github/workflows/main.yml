name: Deploy WAR to Tomcat

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REMOTE_USER: nchattopadhyay
      REMOTE_HOST: 54.175.64.246
      REMOTE_PATH: /home/nchattopadhyay/app
      TOMCAT_PATH: /home/nchattopadhyay/apache-tomcat-11.0.4/webapps

    steps:
    
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Maven
        run: sudo apt-get install -y maven

      - name: Debug System Info
        run: |
          echo "Runner Hostname: $(hostname)"
      - name: Build Project
        run: |
          mvn clean package
          echo "Listing target directory contents"
          ls -ltr target/
      - name: Extract WAR file name
        run: |
          WAR_NAME=$(ls target/*.war | xargs -n1 basename)
          echo "WAR_FILE_NAME=${WAR_NAME}" >> $GITHUB_ENV
          echo "SERVICE_NAME=${WAR_NAME%.war}" >> $GITHUB_ENV
          echo "API_ENDPOINT=http://${{ env.REMOTE_HOST }}:8090/${WAR_NAME%.war}/v1.0/helloworld" >> $GITHUB_ENV
          echo "Extracted WAR File: $WAR_NAME"
          echo "API Endpoint: http://${{ env.REMOTE_HOST }}:8090/${WAR_NAME%.war}/v1.0/helloworld"
      - name: Debug Extracted Variables
        run: |
          echo "WAR File Name: ${{ env.WAR_FILE_NAME }}"
          echo "Service Name: ${{ env.SERVICE_NAME }}"
          echo "API Endpoint: ${{ env.API_ENDPOINT }}"
      - name: Set Up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.REMOTE_HOST }} >> ~/.ssh/known_hosts
      - name: Copy WAR to Remote Server
        run: |
          echo "Checking if WAR file exists"
          ls -l target/${{ env.WAR_FILE_NAME }} || { echo "WAR file not found!"; exit 1; }
          echo "Copying WAR file to remote server"
          scp -i ~/.ssh/deploy_key target/${{ env.WAR_FILE_NAME }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:${{ env.REMOTE_PATH }}/
      - name: Stop Tomcat
        run: |
          echo "Stopping Tomcat on remote server"
          ssh -i ~/.ssh/deploy_key ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} <<EOF
          /home/nchattopadhyay/apache-tomcat-11.0.4/bin/shutdown.sh
          sleep 5
          EOF
      - name: Remove Old Deployment
        run: |
          echo "Deleting old deployment on remote server"
          ssh -i ~/.ssh/deploy_key ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} <<EOF
          rm -rf ${{ env.TOMCAT_PATH }}/${{ env.Service_Name }}
          rm -f ${{ env.TOMCAT_PATH }}/*.war
          EOF
      - name: Deploy WAR to Tomcat
        run: |
          echo "Moving WAR file to Tomcat webapps directory"
          ssh -i ~/.ssh/deploy_key ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} <<EOF
          cp ${{ env.REMOTE_PATH }}/${{ env.WAR_FILE_NAME }} ${{ env.TOMCAT_PATH }}/${{ env.WAR_FILE_NAME }}
          ls -lh ${{ env.TOMCAT_PATH }}/${{ env.WAR_FILE_NAME }}
          EOF
      - name: Start Tomcat
        run: |
          echo "Starting Tomcat"
          ssh -i ~/.ssh/deploy_key ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} <<EOF
          nohup /home/nchattopadhyay/apache-tomcat-11.0.4/bin/startup.sh > /dev/null 2>&1 &
          sleep 2
          echo "Checking if Tomcat process is running"
          ps aux | grep catalina | grep -v grep
          EOF
      - name: Test API Endpoint
        run: |
          echo "Testing API Endpoint: ${{ env.API_ENDPOINT }}"
          status=$(curl -s -o /dev/null -w '%{http_code}' "${{ env.API_ENDPOINT }}")
          echo "HTTP Status Code: $status"
          
          if [[ "$status" == "200" ]]; then
            echo "API is accessible"
          else
            echo "API Health Check Failed - Status Code: $status"
            exit 1
          fi
